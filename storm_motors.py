import pandas as pd
import numpy as np
import seaborn as sns
sns.set(rc={'figure.figsize':(11.7,8.27)})
cars_data=pd.read_csv('cars_sampled.csv')
cars=cars_data.copy()
cars.info()
cars.describe()
pd.set_option('display.float_format',lambda x: '%.3f' % x)
cars.describe()
pd.set_option('display.max_columns',500)
cars.describe()
col=['name','dateCrawled','dateCreated','postalCode','lastSeen']
cars=cars.drop(columns=col, axis=1)
cars.drop_duplicates(keep='first',inplace=True)
cars.isnull().sum()
yearwise_count=cars['yearOfRegistration'].value_counts().sort_index()
sum(cars['yearOfRegistration']>2018)
sum(cars['yearOfRegistration']<1950)
sns.regplot(x='yearOfRegistration',y='price',scatter=True,fit_reg=False,data=cars)
price_count=cars['price'].value_counts().sort_index()
sns.distplot(cars['price'])
cars['price'].describe()
sns.boxplot(y=cars['price'])
sum(cars['price']>150000)
sum(cars['price']<100)
power_count=cars['powerPS'].value_counts().sort_index()
sns.distplot(cars['powerPS'])
cars['powerPS'].describe()
sum(cars['powerPS']>500)
sum(cars['powerPS']<10)
cars=cars[
        (cars.yearOfRegistration<=2018)
        &(cars.yearOfRegistration>=1950)
        &(cars.price>=100)
        &(cars.price<=150000)
        &(cars.powerPS>=10)
        &(cars.powerPS<=500)]
cars['monthOfRegistration']/=12
cars['Age']=(2018-cars['yearOfRegistration'])+cars['monthOfRegistration']
cars['Age']=round(cars['Age'],2)
cars.describe()
cars=cars.drop(columns=['yearOfRegistration','monthOfRegistration'],axis=1)
sns.regplot(x='Age',y='price',scatter=True,fit_reg=False,data=cars)
sns.regplot(x='powerPS',y='price',scatter=True,fit_reg=False,data=cars)
cars['seller'].value_counts()
pd.crosstab(cars['seller'],columns='count',normalize=True)
sns.countplot(x='seller',data=cars)
cars['vehicleType'].value_counts()
col=['seller','offerType','abtest']
cars=cars.drop(columns=col,axis=1)
cars_copy=cars.copy()
cars_select1=cars.select_dtypes(exclude=[object])
correlation=cars_select1.corr()
round(correlation,3)
cars_select1.corr().loc[:,'price'].abs().sort_values(ascending=False)[1:]
cars_omit=cars.dropna(axis=0)
cars_omit=pd.get_dummies(cars_omit,drop_first=True)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
x1=cars_omit.drop(['price'],axis='columns',inplace=False)
y1=cars_omit['price']
prices=pd.DataFrame({"1. Before":y1, "2. After":np.log(y1)})
prices.hist()
y1=np.log(y1)
X_train,X_test,y_train,y_test=train_test_split(x1,y1,test_size=0.3,random_state=3)
print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)
base_pred=np.mean(y_test)
print(base_pred)
base_pred=np.repeat(base_pred,len(y_test))
base_root_mean_square_error=np.sqrt(mean_squared_error(y_test,base_pred))
print(base_root_mean_square_error)
lgr=LinearRegression(fit_intercept=True)
model_lin1=lgr.fit(X_train,y_train)
cars_predictions_lin1=lgr.predict(X_test)
lin_mse1=mean_squared_error(y_test,cars_predictions_lin1)
lin_rmse1=np.sqrt(lin_mse1)
print(lin_rmse1)
r2_lin_test1=model_lin1.score(X_test,y_test)
r2_lin_train1=model_lin1.score(X_train,y_train)
print(r2_lin_test1,r2_lin_train1)
residual=y_test-cars_predictions_lin1
residual.describe()
rf=RandomForestRegressor(n_estimators=100,max_features='auto',max_depth=100,min_samples_split=10,min_samples_leaf=4,random_state=1)
model_rf1=rf.fit(X_train,y_train)
cars_prediction_rf1=rf.predict(X_test)
rf_mse1=mean_squared_error(y_test,cars_prediction_rf1)
rf_rmse1=np.sqrt(rf_mse1)
print(rf_rmse1)
r2_rf_test1=model_rf1.score(X_test,y_test)
r2_rf_train1=model_rf1.score(X_train,y_train)
print(r2_rf_test1,r2_rf_train1)
cars_imputed=cars.apply(lambda x:x.fillna(x.median())\
                        if x.dtype=='float' else \
                        x.fillna(x.value_counts().index[0]))
cars_imputed.isnull().sum()
cars_imputed=pd.get_dummies(cars_imputed,drop_first=True)
x2=cars_imputed.drop(['price'],axis='columns',inplace=False)
y2=cars_imputed['price']
prices=pd.DataFrame({'1. Before':y2,'2. After':np.log(y2)})
prices.hist()
y2=np.log(y2)
X_train1,X_test1,y_train1,y_test1=train_test_split(x2,y2,test_size=0.3,random_state=3)
print(X_train1.shape,X_test1.shape,y_train1.shape,y_test1.shape)
base_pred=np.mean(y_test1)
print(base_pred)
base_pred=np.repeat(base_pred,len(y_test1))
base_root_mean_square_error_imputed=np.sqrt(mean_squared_error(y_test1,base_pred))
print(base_root_mean_square_error_imputed)
lgr2=LinearRegression(fit_intercept=True)
model_lin2=lgr2.fit(X_train1,y_train1)
cars_predictions_lin2=lgr2.predict(X_test1)
lin_mse2=mean_squared_error(y_test1,cars_predictions_lin2)
lin_rmse2=np.sqrt(lin_mse2)
print(lin_rmse2)
r2_lin_test2=model_lin2.score(X_test1,y_test1)
r2_lin_train2=model_lin2.score(X_train1,y_train1)
print(r2_lin_test1,r2_lin_train1)
residual1=y_test1-cars_predictions_lin2
residual1.describe()
rf1=RandomForestRegressor(n_estimators=100,max_features='auto',max_depth=100,min_samples_split=10,min_samples_leaf=4,random_state=1)
model_rf2=rf1.fit(X_train1,y_train1)
cars_prediction_rf2=rf1.predict(X_test1)
rf_mse2=mean_squared_error(y_test1,cars_prediction_rf2)
rf_rmse2=np.sqrt(rf_mse2)
print(rf_rmse2)
r2_rf_test2=model_rf2.score(X_test1,y_test1)
r2_rf_train1=model_rf2.score(X_train1,y_train1)
print(r2_rf_test1,r2_rf_train1)
import pickle
with open('model_cars_pred','wb') as file:
    pickle.dump(rf1,file)
with open('model_cars_pred','rb') as file:
    mp = pickle.load(file)



